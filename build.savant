/*
 * Copyright (c) 2019-2023, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

project(group: "io.fusionauth", name: "fusionauth-localization", version: "1.50.0-EAP.20240327", licenses: ["ApacheV2_0"]) {
  workflow {
    fetch {
      cache()
      url(url: "https://repository.savantbuild.org")
    }
    publish {
      cache()
    }
  }

  publishWorkflow {
    subversion(repository: "https://svn.savantbuild.org")
  }

  publications {
  }
}

/*
 * Define Plugins
 */

idea = loadPlugin(id: "org.savantbuild.plugin:idea:2.0.0-RC.7")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:2.0.0-RC.6")

/*
 * Plugin Settings
 */

target(name: "clean", description: "Cleans out the build directory") {
}

target(name: "compile", description: "Compiles the project") {
}

target(name: "jar", description: "JARs the project", dependsOn: ["compile"]) {
}

target(name: "update", description: "Releases a local integration build of the project") {
  ProcessBuilder pb = new ProcessBuilder("./update.rb").inheritIO().directory(new File('.'))
  def pathname = "."
  if (!execute(pb, pathname)) {
    fail("Unable to run update.rb")
  }
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["update"]) {
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["clean", "int"]) {
  release.release()
}

boolean execute(ProcessBuilder pb, String pathname) {
  def process = pb.inheritIO().directory(new File(pathname)).start()
  process.consumeProcessOutput(System.out, System.err)
  process.waitFor()
  return process.exitValue() == 0
}
